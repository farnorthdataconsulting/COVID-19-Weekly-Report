knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(reactable)
library(htmltools)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(reactablefmtr)
library(RcppRoll)
library(Dict)
library(tinytex)
library(timetk)
#PULL DATA FROM AGOL AND PROCESS DATA
#Pull Data from Cases Data G Hosted on AGOL
agol_cdg_csv = 'https://www.arcgis.com/sharing/rest/content/items/41be1048137a48c992daef8c321f91c0/data'
agol_cdg = read.csv(agol_cdg_csv)
#Fix Prince of Whales Name
if ("Prince Of Wales-Hyder Census Area" %in% agol_cdg$Borough){
agol_cdg["Borough"][agol_cdg["Borough"] == "Prince Of Wales-Hyder Census Area"] <- "Prince of Wales-Hyder Census Area"
}
#Filter by Residents Only
cases_onset_residents <- filter(agol_cdg,
Resident..Y.N. == "Y")
#Pull Only Needed Fields
cases_onset_pull_fields <- select(cases_onset_residents, Date, Cases..Date.Onset.)
#Group All Onset Counts by Date for Statewide Case Counts
cases_onset_group_by_date <- cases_onset_pull_fields %>%
group_by(Date) %>%
summarize(Cases_Date_Onset = sum(Cases..Date.Onset.))
cases_onset_group_by_date$Date <- as.Date(cases_onset_group_by_date$Date, "%m/%d/%Y")
#Aggregate by Week Starting on Saturday
cases_onset_agg_week <- summarise_by_time(
cases_onset_group_by_date,
.date_var = Date,
.by = "week",
Cases_Date_Onset = sum(Cases_Date_Onset)
)
#Limit Dataset to Past 6 Months
cases_onset_filter_dates <- filter(cases_onset_agg_week, Date >= max(Date)-182)
#Set Final Dataframe
cases_onset_by_week <- data.frame(cases_onset_filter_dates)
#PULL DATA FROM AGOL AND PROCESS DATA
#Bring in Cases Data from AGOL
agol_cdg_csv = 'https://www.arcgis.com/sharing/rest/content/items/41be1048137a48c992daef8c321f91c0/data'
agol_cdg = read.csv(agol_cdg_csv)
#Fix Prince of Whales Name
if ("Prince Of Wales-Hyder Census Area" %in% agol_cdg$Borough){
agol_cdg["Borough"][agol_cdg["Borough"] == "Prince Of Wales-Hyder Census Area"] <- "Prince of Wales-Hyder Census Area"
}
#Keep Only Cases by Report Date
case_rate_report_date <- select(agol_cdg,
Date,
Resident..Y.N.,
Occurrence..Y.N.,
Borough,
Cases..Date.Reported.)
#Filter for Residents Only
case_rate_residents <- filter(case_rate_report_date,
Resident..Y.N. == "Y")
#Group by Date and Borough
case_rate_date_borough <- data.frame(case_rate_residents)
case_rate_date_borough$Date <- as.Date(case_rate_date_borough$Date, "%m/%d/%Y")
case_rate_date_borough <- case_rate_date_borough %>%
group_by(Date, Borough) %>%
summarize(Cases = sum(Cases..Date.Reported.)) %>%
arrange(Borough)
#Create Alaska Variable and
case_rate_alaska_add <- case_rate_date_borough %>%
group_by(Date) %>%
summarize(Cases = sum(Cases)) %>%
mutate(Borough = 'Alaska') %>%
select(Date, Borough, Cases)
#Combine Alaska and Boroughs Dataframes
case_rate_ak_bor_combined <- rbind(case_rate_alaska_add, case_rate_date_borough)
#Create Dates Dataframe
case_rate_dates_pull <- data.frame(case_rate_ak_bor_combined)
case_rate_date_min <- min(case_rate_dates_pull$Date)
case_rate_date_max <- max(case_rate_dates_pull$Date)
case_rate_date_list = seq(from = case_rate_date_min, to = case_rate_date_max, by = "day")
case_rate_date_dataframe = data.frame(Date = case_rate_date_list)
#Create Borough List from Cases Dataframe
case_rate_borough_list <- case_rate_ak_bor_combined$Borough
case_rate_borough_list <- case_rate_borough_list[!duplicated(case_rate_borough_list)]
case_rate_borough_list <- case_rate_borough_list[case_rate_borough_list != "Unknown"]
#Run Loop and Create Date Dataframe for each Borough and Combine to Overall Dataset
case_rate_dates_bor_dataframe <- data.frame()
for (borough in case_rate_borough_list){
case_rate_dates_merged_bor <- data.frame(case_rate_date_dataframe)
case_rate_dates_merged_bor["Borough"] = borough
case_rate_dates_bor_dataframe <- rbind(case_rate_dates_bor_dataframe, case_rate_dates_merged_bor)
}
#Merge Existing Cases Data to Dates Dataframe and Set NAs to 0
case_rate_merged_cases_to_date_bor <- left_join(case_rate_dates_bor_dataframe, case_rate_ak_bor_combined, by = c("Date" = "Date", "Borough" = "Borough"))
case_rate_merged_cases_to_date_bor[is.na(case_rate_merged_cases_to_date_bor)] <- 0
#Bring in Population Data Table from AGOL and Merge to Dataframe
agol_ak_pop_csv = "https://www.arcgis.com/sharing/rest/content/items/a898e500714c42c58d350707d2535ef4/data"
ak_pop <- read.csv(agol_ak_pop_csv)
case_rate_merged_cases_pop <- left_join(case_rate_merged_cases_to_date_bor, ak_pop, by = c("Borough" = "Area"))
#Create Cases Over the Last 7 Days and 7 Day Case Rates for Each Borough and Combine back to Dataframe
case_rate_create_cases_last_7_and_rate <- data.frame()
case_rate_cases_7_days_pull <- data.frame(case_rate_merged_cases_pop)
for (borough in case_rate_borough_list){
case_rate_borough_pull <- case_rate_cases_7_days_pull[case_rate_cases_7_days_pull$Borough == borough,]
case_rate_borough_pull <- case_rate_borough_pull %>%
mutate(Cases_Last_7_Days = roll_sum(Cases, 7, align = "right", fill = NA)) %>%
mutate(Rate_Last_7_Days = (Cases_Last_7_Days / Borough.Population) * 100000) %>%
select(-c(Borough.Population))
case_rate_create_cases_last_7_and_rate <- rbind(case_rate_create_cases_last_7_and_rate, case_rate_borough_pull)
}
#Select Data Up to Most Recent Saturday
case_rate_add_weekdays <- mutate(case_rate_create_cases_last_7_and_rate, Weekday = weekdays(Date))
case_rate_find_most_recent_sat <- case_rate_add_weekdays %>%
filter(Weekday == "Saturday")
case_rate_most_recent_saturday <- max(case_rate_find_most_recent_sat$Date)
case_rate_fitler_back_to_most_recent_sat <- case_rate_create_cases_last_7_and_rate %>%
filter(Date <= case_rate_most_recent_saturday)
#Remove Unknown
case_rate_remove_unk <- case_rate_fitler_back_to_most_recent_sat %>%
filter(Borough != "Unknown")
#Set Final Data Table
case_rate_processed_cases_data <- data.frame(case_rate_remove_unk)
#CREATE CASES OVER TIME DATA TABLE
#Pull in Processed Cases Data
case_rate_cases_data_pull <- data.frame(case_rate_processed_cases_data)
#Keep Only Cases
case_rate_keep_cases <- select(case_rate_cases_data_pull, Date, Borough, Cases)
#Group by Borough and Summarize by Cases to find Total Count
case_rate_case_counts <- case_rate_keep_cases %>%
group_by(Borough) %>%
summarize(Cases = sum(Cases))
#Join Most Recent 7 Day Case Count and Rate from Processed Cases Table
case_rate_most_recent_cases_and_rate <- case_rate_cases_data_pull %>%
filter(Date == max(case_rate_cases_data_pull$Date)) %>%
select(-c(Cases))
case_rate_cases_merged_last_7_and_rate <- left_join(case_rate_case_counts, case_rate_most_recent_cases_and_rate, by = c("Borough" = "Borough"))
#Add Community Rate Level Tag
case_rate_cases_add_comm_rate_tag <- data.frame(case_rate_cases_merged_last_7_and_rate)
case_rate_cases_add_comm_rate_tag$Community_Rate_Tag <- ifelse(case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days >= 400, '>400',
ifelse(case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days < 400 & case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days >= 200, "200-399",
ifelse(case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days < 200 & case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days >= 100, "100-199",
ifelse(case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days < 100 & case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days >= 50, "50-99",
ifelse(case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days < 50 & case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days >= 0, "0-49",
"None")))))
#Limit Decimals to 2 in Rates
case_rate_round_rates_decimals <- data.frame(case_rate_cases_add_comm_rate_tag)
case_rate_round_rates_decimals$Rate_Last_7_Days <- round(case_rate_round_rates_decimals$Rate_Last_7_Days, 2)
#Convert Rates to Strings
case_rate_convert_rates_to_strings <- data.frame(case_rate_round_rates_decimals)
case_rate_convert_rates_to_strings$Rate_Last_7_Days <- as.character(case_rate_convert_rates_to_strings$Rate_Last_7_Days)
#If Cases Less than 6, Hide Case Rate
case_rate_hide_case_rates <- data.frame(case_rate_convert_rates_to_strings)
case_rate_hide_case_rates$Rate_Last_7_Days <- ifelse(case_rate_hide_case_rates$Cases_Last_7_Days < 6, "**", case_rate_hide_case_rates$Rate_Last_7_Days)
#Add Commas to Case Counts and Rates
case_rate_add_thousand_commas <- data.frame(case_rate_hide_case_rates)
case_rate_add_thousand_commas$Cases_Last_7_Days <- prettyNum(case_rate_add_thousand_commas$Cases_Last_7_Days, big.mark=",")
case_rate_add_thousand_commas$Rate_Last_7_Days <- prettyNum(case_rate_add_thousand_commas$Rate_Last_7_Days, big.mark=",")
#Set Final Data Table
case_rate_cases_summary <- data.frame(case_rate_add_thousand_commas)
#Pull in Processed Cases Data
case_rate_cases_data_pull <- data.frame(case_rate_processed_cases_data)
#Keep Only Case Rates and Cases Last 7
case_rate_keep_case_rates <- select(case_rate_cases_data_pull, Date, Borough, Rate_Last_7_Days, Cases_Last_7_Days)
#Create Weekdays
case_rate_rates_create_weekdays <- data.frame(case_rate_keep_case_rates)
case_rate_rates_create_weekdays$Weekday <- weekdays(case_rate_rates_create_weekdays$Date)
#Select Only Saturdays from DataFrame
case_rate_rates_keep_sat <- filter(case_rate_rates_create_weekdays, case_rate_rates_create_weekdays$Weekday == "Saturday")
case_rate_rates_keep_sat <- select(case_rate_rates_keep_sat, -c(Weekday))
#Keep Only Last 6 Entries for Each Borough
case_rate_last_6_entries_case_rates <- data.frame()
for (borough in case_rate_borough_list){
case_rate_rates_borough_pull <- filter(case_rate_rates_keep_sat, Borough == borough)
case_rate_keep_last_6 <- tail(case_rate_rates_borough_pull, n = 6)
case_rate_last_6_entries_case_rates <- rbind(case_rate_last_6_entries_case_rates, case_rate_keep_last_6)
}
#Add Community Rate Level Tag
case_rate_rates_add_comm_rate_tag <- data.frame(case_rate_last_6_entries_case_rates)
case_rate_rates_add_comm_rate_tag$Community_Rate_Tag <- ifelse(case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days >= 400, 'level_5',
ifelse(case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days < 400 & case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days >= 200, "level_4",
ifelse(case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days < 200 & case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days >= 100, "level_3",
ifelse(case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days < 100 & case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days >= 50, "level_2",
ifelse(case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days < 50 & case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days >= 0, "level_1",
"None")))))
#Set Final Data Table
case_rate_case_rates_over_6_weeks <- data.frame(case_rate_rates_add_comm_rate_tag)
#SET TIMESTAMPS FOR HEADER TITLES
#Pull Date Frame from Case Rates Overt Time Dataframe
case_rate_cases_time_pull <- select(case_rate_case_rates_over_6_weeks, Date, Borough) %>%
filter(Borough == "Alaska") %>%
select(Date)
#Set Extra Day on Start Dates to Match Sunday
case_rate_cases_start <- case_rate_cases_time_pull[5,1] + 1
case_rate_rate_start <- case_rate_cases_time_pull[1,1] + 1
#Pull the Timeframe for the Cases Over Last 7 Days
case_rate_cases_timeframe <- paste0(format(as.Date(case_rate_cases_start, format = "%Y%m%d"), "%b %d"),
" - ",
format(as.Date(case_rate_cases_time_pull[6,1], format = "%Y%m%d"), "%b %d"))
#Pull the Timeframe for the Case Rates Bar Graph
case_rate_rates_timeframe <- paste0(format(as.Date(case_rate_rate_start, format = "%Y%m%d"), "%b %d"),
" - ",
format(as.Date(case_rate_cases_time_pull[6,1], format = "%Y%m%d"), "%b %d"))
#CREATE BAR CHART IMAGES FOR TABLE
#Set an Empty List to Store Bar Graph File Locations
case_rate_temp_file_dict <- dict(init_keys = NULL, init_values = NULL)
#Set Dataframe for the Bar Charts
case_rate_bar_charts <- data.frame(case_rate_case_rates_over_6_weeks)
#Set Color Keys for Levels
level_5 = "#a8171c"
level_4 = "#df342d"
level_3 = "#fb6f50"
level_2 = "#fcb194"
level_1 = "#fee6da"
#Set Color Palette For Community Rates Bar Charts
color_palette <- c(
"level_1" = level_1,
"level_2" = level_2,
"level_3" = level_3,
"level_4" = level_4,
"level_5" = level_5
)
#Generate Bar Graphs for Each Borough and Save to TempDir for Later Use
for (borough in case_rate_borough_list){
#Pull Data by Borough
case_rate_bar_graphs_bor_pull <- case_rate_bar_charts[case_rate_bar_charts$Borough == borough,]
par(mar=c(1, 1, 1, 1))
#Generate Bar Graph
rate_plot <- ggplot(case_rate_bar_graphs_bor_pull) +
geom_bar(aes(x=Date, y = Cases_Last_7_Days, fill = Community_Rate_Tag), width = 5, show.legend = FALSE, stat = 'identity') +
scale_fill_manual(values = color_palette) +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent'),
plot.margin = unit(c(-15, -5, -20, -5), "pt")
)
#Set File Path to Temporary Folder
case_rate_temp_filepath <- file.path(tempdir(), paste0(borough, " Bar Chart.png"))
#Add Temp Filepath to Dictionary
case_rate_temp_file_dict[borough] <- case_rate_temp_filepath
#Export Bar Graph and Save to Temp File Location
ggsave(path = file.path(tempdir()),
filename = paste0(borough, " Bar Chart.png"),
dpi= 500)
}
#Set Table Feature Options
options(reactable.theme = reactableTheme(
backgroundColor = '#fffff',
borderColor = "hsl(233, 9%, 22%)",
stripedColor = '#e6e6e6',
))
#Set Cases Summary and Add Columsn for Reactable Table
cases_reactable_table <- data.frame(case_rate_cases_summary) %>%
mutate(Case_Trend = NA) %>%
select(-c(Date, Cases)) %>%
select(Borough, Community_Rate_Tag, Rate_Last_7_Days, Cases_Last_7_Days, , Case_Trend)
#Create Tag Dictionary for Color Coding Case Rate Tags
rate_tag_dict <- dict(init_keys = NULL, init_values = NULL)
rate_tag_dict[">400"] <- 'level_5'
rate_tag_dict["200-399"] <- 'level_4'
rate_tag_dict["100-199"] <- 'level_3'
rate_tag_dict["50-99"] <- 'level_2'
rate_tag_dict["0-49"] <- 'level_1'
#Generate Final Table with Reactable
reactable(cases_reactable_table,
defaultPageSize = 50,
fullWidth = FALSE,
striped = TRUE,
borderless = FALSE,
columns = list(
Borough = colDef(name = "Borough/Census Area",
minWidth = 260,
cell = function(value) {
class <- 'area_varela'
div(class = class, value)
}),
Community_Rate_Tag = colDef(name = 'Community Case Rate',
align = 'center',
show = FALSE,
minWidth = 100,
cell = function(value) {
class <- paste0("tag rate_", rate_tag_dict[value])
div(class = class, value)
}),
Cases_Last_7_Days = colDef(#name = "Case Count",
html = TRUE,
header = function(value) {
value = paste0("Case Count ", cases_timeframe)
div(value)
},
minWidth = 120,
align = 'center',
cell = function(value){
div(class = 'number_varela', value)
}
),
Rate_Last_7_Days = colDef(name = "Case Rate Per 100K",
minWidth = 140,
align = 'center',
format = colFormat(separators = TRUE),
cell = function(value, index){
level <- cases_reactable_table$Community_Rate_Tag[index]
class <- paste0("tag rate_", rate_tag_dict[level])
div(class = class, value)
}
),
Case_Trend = colDef(#name = "Cases Trend (Last 6 Weeks)",
header = function(value) {
value = paste0("Weekly Case Counts ", rates_timeframe)
div(value)
},
align = 'center',
html = TRUE,
minWidth = 160,
cell = function(values, index) {
chart_path = temp_file_dict[cases_reactable_table$Borough[index]]
img_src <- knitr::image_uri(chart_path)
image <- img(src = img_src, alt = '', width = 120, height = 25)
tagList(
div(style = list(display = 'flex'), image))
})
))
#Set Table Feature Options
options(reactable.theme = reactableTheme(
backgroundColor = '#fffff',
borderColor = "hsl(233, 9%, 22%)",
stripedColor = '#e6e6e6',
))
#Set Cases Summary and Add Columsn for Reactable Table
cases_reactable_table <- data.frame(case_rate_cases_summary) %>%
mutate(Case_Trend = NA) %>%
select(-c(Date, Cases)) %>%
select(Borough, Community_Rate_Tag, Rate_Last_7_Days, Cases_Last_7_Days, , Case_Trend)
#Create Tag Dictionary for Color Coding Case Rate Tags
rate_tag_dict <- dict(init_keys = NULL, init_values = NULL)
rate_tag_dict[">400"] <- 'level_5'
rate_tag_dict["200-399"] <- 'level_4'
rate_tag_dict["100-199"] <- 'level_3'
rate_tag_dict["50-99"] <- 'level_2'
rate_tag_dict["0-49"] <- 'level_1'
#Generate Final Table with Reactable
reactable(cases_reactable_table,
defaultPageSize = 50,
fullWidth = FALSE,
striped = TRUE,
borderless = FALSE,
columns = list(
Borough = colDef(name = "Borough/Census Area",
minWidth = 260,
cell = function(value) {
class <- 'area_varela'
div(class = class, value)
}),
Community_Rate_Tag = colDef(name = 'Community Case Rate',
align = 'center',
show = FALSE,
minWidth = 100,
cell = function(value) {
class <- paste0("tag rate_", rate_tag_dict[value])
div(class = class, value)
}),
Cases_Last_7_Days = colDef(#name = "Case Count",
html = TRUE,
header = function(value) {
value = paste0("Case Count ", case_rate_cases_timeframe)
div(value)
},
minWidth = 120,
align = 'center',
cell = function(value){
div(class = 'number_varela', value)
}
),
Rate_Last_7_Days = colDef(name = "Case Rate Per 100K",
minWidth = 140,
align = 'center',
format = colFormat(separators = TRUE),
cell = function(value, index){
level <- cases_reactable_table$Community_Rate_Tag[index]
class <- paste0("tag rate_", rate_tag_dict[level])
div(class = class, value)
}
),
Case_Trend = colDef(#name = "Cases Trend (Last 6 Weeks)",
header = function(value) {
value = paste0("Weekly Case Counts ", case_rate_rates_timeframe)
div(value)
},
align = 'center',
html = TRUE,
minWidth = 160,
cell = function(values, index) {
chart_path = temp_file_dict[cases_reactable_table$Borough[index]]
img_src <- knitr::image_uri(chart_path)
image <- img(src = img_src, alt = '', width = 120, height = 25)
tagList(
div(style = list(display = 'flex'), image))
})
))
#Set Table Feature Options
options(reactable.theme = reactableTheme(
backgroundColor = '#fffff',
borderColor = "hsl(233, 9%, 22%)",
stripedColor = '#e6e6e6',
))
#Set Cases Summary and Add Columsn for Reactable Table
cases_reactable_table <- data.frame(case_rate_cases_summary) %>%
mutate(Case_Trend = NA) %>%
select(-c(Date, Cases)) %>%
select(Borough, Community_Rate_Tag, Rate_Last_7_Days, Cases_Last_7_Days, , Case_Trend)
#Create Tag Dictionary for Color Coding Case Rate Tags
rate_tag_dict <- dict(init_keys = NULL, init_values = NULL)
rate_tag_dict[">400"] <- 'level_5'
rate_tag_dict["200-399"] <- 'level_4'
rate_tag_dict["100-199"] <- 'level_3'
rate_tag_dict["50-99"] <- 'level_2'
rate_tag_dict["0-49"] <- 'level_1'
#Generate Final Table with Reactable
reactable(cases_reactable_table,
defaultPageSize = 50,
fullWidth = FALSE,
striped = TRUE,
borderless = FALSE,
columns = list(
Borough = colDef(name = "Borough/Census Area",
minWidth = 260,
cell = function(value) {
class <- 'area_varela'
div(class = class, value)
}),
Community_Rate_Tag = colDef(name = 'Community Case Rate',
align = 'center',
show = FALSE,
minWidth = 100,
cell = function(value) {
class <- paste0("tag rate_", rate_tag_dict[value])
div(class = class, value)
}),
Cases_Last_7_Days = colDef(#name = "Case Count",
html = TRUE,
header = function(value) {
value = paste0("Case Count ", case_rate_cases_timeframe)
div(value)
},
minWidth = 120,
align = 'center',
cell = function(value){
div(class = 'number_varela', value)
}
),
Rate_Last_7_Days = colDef(name = "Case Rate Per 100K",
minWidth = 140,
align = 'center',
format = colFormat(separators = TRUE),
cell = function(value, index){
level <- cases_reactable_table$Community_Rate_Tag[index]
class <- paste0("tag rate_", rate_tag_dict[level])
div(class = class, value)
}
),
Case_Trend = colDef(#name = "Cases Trend (Last 6 Weeks)",
header = function(value) {
value = paste0("Weekly Case Counts ", case_rate_rates_timeframe)
div(value)
},
align = 'center',
html = TRUE,
minWidth = 160,
cell = function(values, index) {
chart_path = case_rate_temp_file_dict[cases_reactable_table$Borough[index]]
img_src <- knitr::image_uri(chart_path)
image <- img(src = img_src, alt = '', width = 120, height = 25)
tagList(
div(style = list(display = 'flex'), image))
})
))
