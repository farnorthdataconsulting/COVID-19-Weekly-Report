#Merge Region Grab to Merged Dataset
hosp_bed_merged_datasets <- merge(hosp_bed_merged_datasets, hosp_bed_region_grab, by = c("Survey.Date"))
}
str(hosp_bed_region_grab)
#Convert Dates to Weekdays
#Keep Only Saturdays
#Drop Weekdays Column
#Set Final DataFrame
View(hosp_bed_merged_datasets)
#Pull Hospital Data Table A from AGOL
agol_hda_csv = "https://www.arcgis.com/sharing/rest/content/items/47554fa6f8e147d9b05f5c990ba630f6/data"
hosp_bed_data_pull = read.csv(agol_hda_csv)
#Filter by GCAF
hosp_bed_filter_gcaf <- filter(hosp_bed_data_pull,
Facility.Filter == 1)
#Select Region and Counts Columns
hosp_bed_select_cols <- select(hosp_bed_filter_gcaf,
Survey.Date, Hospital.Region, Pos.COVID..Imputed.)
#Create List of Regions in Data Table
hosp_bed_region_list <- select(hosp_bed_select_cols, Hospital.Region)
hosp_bed_region_list <- unique(hosp_bed_region_list)
hosp_bed_region_list <- as.list(hosp_bed_region_list$Hospital.Region)
#Create Empty Data Frame with Dates for Merge
hosp_bed_merged_datasets <- data.frame(hosp_bed_select_cols) %>%
select(-c(Hospital.Region, Pos.COVID..Imputed.)) %>%
unique()
hosp_bed_merged_datasets$Survey.Date <- as.character(hosp_bed_merged_datasets$Survey.Date)
#Merge Region Data into Main Dataframe
for (region in hosp_bed_region_list){
#Select Out 1 Region at a Time
hosp_bed_region_grab <- filter(hosp_bed_select_cols, Hospital.Region == region)
#Convert Survey Date Field to Date Type
hosp_bed_region_grab$Survey.Date <- as.Date( hosp_bed_region_grab$Survey.Date, "%m/%d/%Y")
#Group by Day
hosp_bed_region_grab <- hosp_bed_region_grab %>%
group_by(Survey.Date, Hospital.Region) %>%
summarize(Pos.COVID..Imputed. = sum(Pos.COVID..Imputed.))
#Create Region Column
hosp_bed_region_grab[[region]] = hosp_bed_region_grab$Pos.COVID..Imputed.
#Drop Pos COVID Count and Region Name
hosp_bed_region_grab <- select(hosp_bed_region_grab, Survey.Date, all_of(region))
#Convert Dates to Characters
hosp_bed_region_grab$Survey.Date <- as.character(hosp_bed_region_grab$Survey.Date)
#Merge Region Grab to Merged Dataset
hosp_bed_merged_datasets <- merge(hosp_bed_merged_datasets, hosp_bed_region_grab, by = c("Survey.Date"))
}
#Convert Dates to Weekdays
#Keep Only Saturdays
#Drop Weekdays Column
#Set Final DataFrame
View(hosp_bed_merged_datasets)
View(hosp_bed_region_grab)
#Pull Hospital Data Table A from AGOL
agol_hda_csv = "https://www.arcgis.com/sharing/rest/content/items/47554fa6f8e147d9b05f5c990ba630f6/data"
hosp_bed_data_pull = read.csv(agol_hda_csv)
#Filter by GCAF
hosp_bed_filter_gcaf <- filter(hosp_bed_data_pull,
Facility.Filter == 1)
#Select Region and Counts Columns
hosp_bed_select_cols <- select(hosp_bed_filter_gcaf,
Survey.Date, Hospital.Region, Pos.COVID..Imputed.)
#Create List of Regions in Data Table
hosp_bed_region_list <- select(hosp_bed_select_cols, Hospital.Region)
hosp_bed_region_list <- unique(hosp_bed_region_list)
hosp_bed_region_list <- as.list(hosp_bed_region_list$Hospital.Region)
#Create Empty Data Frame with Dates for Merge
hosp_bed_merged_datasets <- data.frame(hosp_bed_select_cols) %>%
select(-c(Hospital.Region, Pos.COVID..Imputed.)) %>%
unique()
hosp_bed_merged_datasets$Survey.Date <- as.character(hosp_bed_merged_datasets$Survey.Date)
#Pull Hospital Data Table A from AGOL
agol_hda_csv = "https://www.arcgis.com/sharing/rest/content/items/47554fa6f8e147d9b05f5c990ba630f6/data"
hosp_bed_data_pull = read.csv(agol_hda_csv)
#Filter by GCAF
hosp_bed_filter_gcaf <- filter(hosp_bed_data_pull,
Facility.Filter == 1)
#Select Region and Counts Columns
hosp_bed_select_cols <- select(hosp_bed_filter_gcaf,
Survey.Date, Hospital.Region, Pos.COVID..Imputed.)
#Create List of Regions in Data Table
hosp_bed_region_list <- select(hosp_bed_select_cols, Hospital.Region)
hosp_bed_region_list <- unique(hosp_bed_region_list)
hosp_bed_region_list <- as.list(hosp_bed_region_list$Hospital.Region)
#Create Empty Data Frame with Dates for Merge
hosp_bed_merged_datasets <- data.frame(hosp_bed_select_cols) %>%
select(-c(Hospital.Region, Pos.COVID..Imputed.)) %>%
unique()
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%m/%d/%Y")
hosp_bed_merged_datasets$Survey.Date <- as.character(hosp_bed_merged_datasets$Survey.Date)
#Merge Region Data into Main Dataframe
for (region in hosp_bed_region_list){
#Select Out 1 Region at a Time
hosp_bed_region_grab <- filter(hosp_bed_select_cols, Hospital.Region == region)
#Convert Survey Date Field to Date Type
hosp_bed_region_grab$Survey.Date <- as.Date( hosp_bed_region_grab$Survey.Date, "%m/%d/%Y")
#Group by Day
hosp_bed_region_grab <- hosp_bed_region_grab %>%
group_by(Survey.Date, Hospital.Region) %>%
summarize(Pos.COVID..Imputed. = sum(Pos.COVID..Imputed.))
#Create Region Column
hosp_bed_region_grab[[region]] = hosp_bed_region_grab$Pos.COVID..Imputed.
#Drop Pos COVID Count and Region Name
hosp_bed_region_grab <- select(hosp_bed_region_grab, Survey.Date, all_of(region))
#Convert Dates to Characters
hosp_bed_region_grab$Survey.Date <- as.character(hosp_bed_region_grab$Survey.Date)
#Merge Region Grab to Merged Dataset
hosp_bed_merged_datasets <- merge(hosp_bed_merged_datasets, hosp_bed_region_grab, by = c("Survey.Date"))
}
#Convert Dates to Weekdays
#Keep Only Saturdays
#Drop Weekdays Column
#Set Final DataFrame
#Pull Hospital Data Table A from AGOL
agol_hda_csv = "https://www.arcgis.com/sharing/rest/content/items/47554fa6f8e147d9b05f5c990ba630f6/data"
hosp_bed_data_pull = read.csv(agol_hda_csv)
#Filter by GCAF
hosp_bed_filter_gcaf <- filter(hosp_bed_data_pull,
Facility.Filter == 1)
#Select Region and Counts Columns
hosp_bed_select_cols <- select(hosp_bed_filter_gcaf,
Survey.Date, Hospital.Region, Pos.COVID..Imputed.)
#Create List of Regions in Data Table
hosp_bed_region_list <- select(hosp_bed_select_cols, Hospital.Region)
hosp_bed_region_list <- unique(hosp_bed_region_list)
hosp_bed_region_list <- as.list(hosp_bed_region_list$Hospital.Region)
#Create Empty Data Frame with Dates for Merge
hosp_bed_merged_datasets <- data.frame(hosp_bed_select_cols) %>%
select(-c(Hospital.Region, Pos.COVID..Imputed.)) %>%
unique()
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%m/%d/%Y")
hosp_bed_merged_datasets$Survey.Date <- as.character(hosp_bed_merged_datasets$Survey.Date)
#Merge Region Data into Main Dataframe
for (region in hosp_bed_region_list){
#Select Out 1 Region at a Time
hosp_bed_region_grab <- filter(hosp_bed_select_cols, Hospital.Region == region)
#Convert Survey Date Field to Date Type
hosp_bed_region_grab$Survey.Date <- as.Date( hosp_bed_region_grab$Survey.Date, "%m/%d/%Y")
#Group by Day
hosp_bed_region_grab <- hosp_bed_region_grab %>%
group_by(Survey.Date, Hospital.Region) %>%
summarize(Pos.COVID..Imputed. = sum(Pos.COVID..Imputed.))
#Create Region Column
hosp_bed_region_grab[[region]] = hosp_bed_region_grab$Pos.COVID..Imputed.
#Drop Pos COVID Count and Region Name
hosp_bed_region_grab <- select(hosp_bed_region_grab, Survey.Date, all_of(region))
#Convert Dates to Characters
hosp_bed_region_grab$Survey.Date <- as.character(hosp_bed_region_grab$Survey.Date)
#Merge Region Grab to Merged Dataset
hosp_bed_merged_datasets <- merge(hosp_bed_merged_datasets, hosp_bed_region_grab, by = c("Survey.Date"))
}
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%m/%d/%Y")
#Convert Dates to Weekdays
#Keep Only Saturdays
#Drop Weekdays Column
#Set Final DataFrame
#Convert Dates to Weekdays
hosp_bed_add_weekdays <- mutate(hosp_bed_merged_datasets, Weekday = weekdays(Survey.Date))
View(hosp_bed_add_weekdays)
#Pull Hospital Data Table A from AGOL
agol_hda_csv = "https://www.arcgis.com/sharing/rest/content/items/47554fa6f8e147d9b05f5c990ba630f6/data"
hosp_bed_data_pull = read.csv(agol_hda_csv)
#Filter by GCAF
hosp_bed_filter_gcaf <- filter(hosp_bed_data_pull,
Facility.Filter == 1)
#Select Region and Counts Columns
hosp_bed_select_cols <- select(hosp_bed_filter_gcaf,
Survey.Date, Hospital.Region, Pos.COVID..Imputed.)
#Create List of Regions in Data Table
hosp_bed_region_list <- select(hosp_bed_select_cols, Hospital.Region)
hosp_bed_region_list <- unique(hosp_bed_region_list)
hosp_bed_region_list <- as.list(hosp_bed_region_list$Hospital.Region)
#Create Empty Data Frame with Dates for Merge
hosp_bed_merged_datasets <- data.frame(hosp_bed_select_cols) %>%
select(-c(Hospital.Region, Pos.COVID..Imputed.)) %>%
unique()
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%m/%d/%Y")
hosp_bed_merged_datasets$Survey.Date <- as.character(hosp_bed_merged_datasets$Survey.Date)
#Merge Region Data into Main Dataframe
for (region in hosp_bed_region_list){
#Select Out 1 Region at a Time
hosp_bed_region_grab <- filter(hosp_bed_select_cols, Hospital.Region == region)
#Convert Survey Date Field to Date Type
hosp_bed_region_grab$Survey.Date <- as.Date( hosp_bed_region_grab$Survey.Date, "%m/%d/%Y")
#Group by Day
hosp_bed_region_grab <- hosp_bed_region_grab %>%
group_by(Survey.Date, Hospital.Region) %>%
summarize(Pos.COVID..Imputed. = sum(Pos.COVID..Imputed.))
#Create Region Column
hosp_bed_region_grab[[region]] = hosp_bed_region_grab$Pos.COVID..Imputed.
#Drop Pos COVID Count and Region Name
hosp_bed_region_grab <- select(hosp_bed_region_grab, Survey.Date, all_of(region))
#Convert Dates to Characters
hosp_bed_region_grab$Survey.Date <- as.character(hosp_bed_region_grab$Survey.Date)
#Merge Region Grab to Merged Dataset
hosp_bed_merged_datasets <- merge(hosp_bed_merged_datasets, hosp_bed_region_grab, by = c("Survey.Date"))
}
View(hosp_bed_merged_datasets)
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%m-%d-%Y")
#Pull Hospital Data Table A from AGOL
agol_hda_csv = "https://www.arcgis.com/sharing/rest/content/items/47554fa6f8e147d9b05f5c990ba630f6/data"
hosp_bed_data_pull = read.csv(agol_hda_csv)
#Filter by GCAF
hosp_bed_filter_gcaf <- filter(hosp_bed_data_pull,
Facility.Filter == 1)
#Select Region and Counts Columns
hosp_bed_select_cols <- select(hosp_bed_filter_gcaf,
Survey.Date, Hospital.Region, Pos.COVID..Imputed.)
#Create List of Regions in Data Table
hosp_bed_region_list <- select(hosp_bed_select_cols, Hospital.Region)
hosp_bed_region_list <- unique(hosp_bed_region_list)
hosp_bed_region_list <- as.list(hosp_bed_region_list$Hospital.Region)
#Create Empty Data Frame with Dates for Merge
hosp_bed_merged_datasets <- data.frame(hosp_bed_select_cols) %>%
select(-c(Hospital.Region, Pos.COVID..Imputed.)) %>%
unique()
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%m/%d/%Y")
hosp_bed_merged_datasets$Survey.Date <- as.character(hosp_bed_merged_datasets$Survey.Date)
#Merge Region Data into Main Dataframe
for (region in hosp_bed_region_list){
#Select Out 1 Region at a Time
hosp_bed_region_grab <- filter(hosp_bed_select_cols, Hospital.Region == region)
#Convert Survey Date Field to Date Type
hosp_bed_region_grab$Survey.Date <- as.Date( hosp_bed_region_grab$Survey.Date, "%m/%d/%Y")
#Group by Day
hosp_bed_region_grab <- hosp_bed_region_grab %>%
group_by(Survey.Date, Hospital.Region) %>%
summarize(Pos.COVID..Imputed. = sum(Pos.COVID..Imputed.))
#Create Region Column
hosp_bed_region_grab[[region]] = hosp_bed_region_grab$Pos.COVID..Imputed.
#Drop Pos COVID Count and Region Name
hosp_bed_region_grab <- select(hosp_bed_region_grab, Survey.Date, all_of(region))
#Convert Dates to Characters
hosp_bed_region_grab$Survey.Date <- as.character(hosp_bed_region_grab$Survey.Date)
#Merge Region Grab to Merged Dataset
hosp_bed_merged_datasets <- merge(hosp_bed_merged_datasets, hosp_bed_region_grab, by = c("Survey.Date"))
#Pull Hospital Data Table A from AGOL
agol_hda_csv = "https://www.arcgis.com/sharing/rest/content/items/47554fa6f8e147d9b05f5c990ba630f6/data"
hosp_bed_data_pull = read.csv(agol_hda_csv)
#Filter by GCAF
hosp_bed_filter_gcaf <- filter(hosp_bed_data_pull,
Facility.Filter == 1)
#Select Region and Counts Columns
hosp_bed_select_cols <- select(hosp_bed_filter_gcaf,
Survey.Date, Hospital.Region, Pos.COVID..Imputed.)
#Create List of Regions in Data Table
hosp_bed_region_list <- select(hosp_bed_select_cols, Hospital.Region)
hosp_bed_region_list <- unique(hosp_bed_region_list)
hosp_bed_region_list <- as.list(hosp_bed_region_list$Hospital.Region)
#Create Empty Data Frame with Dates for Merge
hosp_bed_merged_datasets <- data.frame(hosp_bed_select_cols) %>%
select(-c(Hospital.Region, Pos.COVID..Imputed.)) %>%
unique()
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%m/%d/%Y")
hosp_bed_merged_datasets$Survey.Date <- as.character(hosp_bed_merged_datasets$Survey.Date)
#Merge Region Data into Main Dataframe
for (region in hosp_bed_region_list){
#Select Out 1 Region at a Time
hosp_bed_region_grab <- filter(hosp_bed_select_cols, Hospital.Region == region)
#Convert Survey Date Field to Date Type
hosp_bed_region_grab$Survey.Date <- as.Date( hosp_bed_region_grab$Survey.Date, "%m/%d/%Y")
#Group by Day
hosp_bed_region_grab <- hosp_bed_region_grab %>%
group_by(Survey.Date, Hospital.Region) %>%
summarize(Pos.COVID..Imputed. = sum(Pos.COVID..Imputed.))
#Create Region Column
hosp_bed_region_grab[[region]] = hosp_bed_region_grab$Pos.COVID..Imputed.
#Drop Pos COVID Count and Region Name
hosp_bed_region_grab <- select(hosp_bed_region_grab, Survey.Date, all_of(region))
#Convert Dates to Characters
hosp_bed_region_grab$Survey.Date <- as.character(hosp_bed_region_grab$Survey.Date)
#Merge Region Grab to Merged Dataset
hosp_bed_merged_datasets <- merge(hosp_bed_merged_datasets, hosp_bed_region_grab, by = c("Survey.Date"))
}
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%Y-%m-%d")
#Convert Dates to Weekdays
hosp_bed_add_weekdays <- mutate(hosp_bed_merged_datasets, Weekday = weekdays(Survey.Date))
#Keep Only Saturdays
#Drop Weekdays Column
#Set Final DataFrame
#Pull Hospital Data Table A from AGOL
agol_hda_csv = "https://www.arcgis.com/sharing/rest/content/items/47554fa6f8e147d9b05f5c990ba630f6/data"
hosp_bed_data_pull = read.csv(agol_hda_csv)
#Filter by GCAF
hosp_bed_filter_gcaf <- filter(hosp_bed_data_pull,
Facility.Filter == 1)
#Select Region and Counts Columns
hosp_bed_select_cols <- select(hosp_bed_filter_gcaf,
Survey.Date, Hospital.Region, Pos.COVID..Imputed.)
#Create List of Regions in Data Table
hosp_bed_region_list <- select(hosp_bed_select_cols, Hospital.Region)
hosp_bed_region_list <- unique(hosp_bed_region_list)
hosp_bed_region_list <- as.list(hosp_bed_region_list$Hospital.Region)
#Create Empty Data Frame with Dates for Merge
hosp_bed_merged_datasets <- data.frame(hosp_bed_select_cols) %>%
select(-c(Hospital.Region, Pos.COVID..Imputed.)) %>%
unique()
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%m/%d/%Y")
hosp_bed_merged_datasets$Survey.Date <- as.character(hosp_bed_merged_datasets$Survey.Date)
#Merge Region Data into Main Dataframe
for (region in hosp_bed_region_list){
#Select Out 1 Region at a Time
hosp_bed_region_grab <- filter(hosp_bed_select_cols, Hospital.Region == region)
#Convert Survey Date Field to Date Type
hosp_bed_region_grab$Survey.Date <- as.Date( hosp_bed_region_grab$Survey.Date, "%m/%d/%Y")
#Group by Day
hosp_bed_region_grab <- hosp_bed_region_grab %>%
group_by(Survey.Date, Hospital.Region) %>%
summarize(Pos.COVID..Imputed. = sum(Pos.COVID..Imputed.))
#Create Region Column
hosp_bed_region_grab[[region]] = hosp_bed_region_grab$Pos.COVID..Imputed.
#Drop Pos COVID Count and Region Name
hosp_bed_region_grab <- select(hosp_bed_region_grab, Survey.Date, all_of(region))
#Convert Dates to Characters
hosp_bed_region_grab$Survey.Date <- as.character(hosp_bed_region_grab$Survey.Date)
#Merge Region Grab to Merged Dataset
hosp_bed_merged_datasets <- merge(hosp_bed_merged_datasets, hosp_bed_region_grab, by = c("Survey.Date"))
}
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%Y-%m-%d")
#Convert Dates to Weekdays
hosp_bed_add_weekdays <- mutate(hosp_bed_merged_datasets, Weekday = weekdays(Survey.Date))
#Keep Only Saturdays
#Drop Weekdays Column
#Set Final DataFrame
#Keep Only Saturdays
hosp_bed_keep_sat <- filter(hosp_bed_add_weekdays, Weekday == "Saturday")
#Drop Weekdays Column
hosp_bed_drop_weekday <- select(hosp_bed_keep_sat, -c(Weekday))
View(hosp_bed_drop_weekday)
#Set Final DataFrame
hosp_bed_occupied <- data.frame(hosp_bed_drop_weekday)
library(googlevis)
library(googleVis)
library(highcharter)
gvisBarChart(cases_onset_by_week, xvar = "Cases by Onset Date", yvar = "Weekly COVID-19 Cases", options = list())
#PULL DATA FROM AGOL AND PROCESS DATA
#Pull Data from Cases Data G Hosted on AGOL
agol_cdg_csv = 'https://www.arcgis.com/sharing/rest/content/items/41be1048137a48c992daef8c321f91c0/data'
agol_cdg = read.csv(agol_cdg_csv)
#Fix Prince of Whales Name
if ("Prince Of Wales-Hyder Census Area" %in% agol_cdg$Borough){
agol_cdg["Borough"][agol_cdg["Borough"] == "Prince Of Wales-Hyder Census Area"] <- "Prince of Wales-Hyder Census Area"
}
#Filter by Residents Only
cases_onset_residents <- filter(agol_cdg,
Resident..Y.N. == "Y")
#Pull Only Needed Fields
cases_onset_pull_fields <- select(cases_onset_residents, Date, Cases..Date.Onset.)
#Group All Onset Counts by Date for Statewide Case Counts
cases_onset_group_by_date <- cases_onset_pull_fields %>%
group_by(Date) %>%
summarize(Cases_Date_Onset = sum(Cases..Date.Onset.))
cases_onset_group_by_date$Date <- as.Date(cases_onset_group_by_date$Date, "%m/%d/%Y")
#Aggregate by Week Starting on Saturday
cases_onset_agg_week <- summarise_by_time(
cases_onset_group_by_date,
.date_var = Date,
.by = "week",
Cases_Date_Onset = sum(Cases_Date_Onset)
)
#Limit Dataset to Past 6 Months
cases_onset_filter_dates <- filter(cases_onset_agg_week, Date >= max(Date)-182)
#Set Final Dataframe
cases_onset_by_week <- data.frame(cases_onset_filter_dates)
gvisBarChart(cases_onset_by_week, xvar = "Cases by Onset Date", yvar = "Weekly COVID-19 Cases", options = list())
View(cases_onset_by_week)
gvisBarChart(cases_onset_by_week, xvar = Date, yvar = Cases_Onset_Date, options = list())
gvisBarChart(cases_onset_by_week, xvar = Date, yvar = Cases_Date_Onset, options = list())
gvisBarChart(cases_onset_by_week, xvar = Date, yvar = Cases_Date_Onset, options = list())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(reactable)
library(htmltools)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(reactablefmtr)
library(RcppRoll)
library(Dict)
library(tinytex)
library(timetk)
library(googleVis)
#PULL DATA FROM AGOL AND PROCESS DATA
#Pull Data from Cases Data G Hosted on AGOL
agol_cdg_csv = 'https://www.arcgis.com/sharing/rest/content/items/41be1048137a48c992daef8c321f91c0/data'
agol_cdg = read.csv(agol_cdg_csv)
#Fix Prince of Whales Name
if ("Prince Of Wales-Hyder Census Area" %in% agol_cdg$Borough){
agol_cdg["Borough"][agol_cdg["Borough"] == "Prince Of Wales-Hyder Census Area"] <- "Prince of Wales-Hyder Census Area"
}
#Filter by Residents Only
cases_onset_residents <- filter(agol_cdg,
Resident..Y.N. == "Y")
#Pull Only Needed Fields
cases_onset_pull_fields <- select(cases_onset_residents, Date, Cases..Date.Onset.)
#Group All Onset Counts by Date for Statewide Case Counts
cases_onset_group_by_date <- cases_onset_pull_fields %>%
group_by(Date) %>%
summarize(Cases_Date_Onset = sum(Cases..Date.Onset.))
cases_onset_group_by_date$Date <- as.Date(cases_onset_group_by_date$Date, "%m/%d/%Y")
#Aggregate by Week Starting on Saturday
cases_onset_agg_week <- summarise_by_time(
cases_onset_group_by_date,
.date_var = Date,
.by = "week",
Cases_Date_Onset = sum(Cases_Date_Onset)
)
#Limit Dataset to Past 6 Months
cases_onset_filter_dates <- filter(cases_onset_agg_week, Date >= max(Date)-182)
#Set Final Dataframe
cases_onset_by_week <- data.frame(cases_onset_filter_dates)
gvisBarChart(cases_onset_by_week, xvar = Date, yvar = Cases_Date_Onset, options = list())
gvisBarChart(cases_onset_by_week, xvar = Date, yvar = Cases_Date_Onset)
gvisBarChart(cases_onset_by_week, xvar = Date, yvar = Cases_Date_Onset)
colnames(cases_onset_by_week)
gvisBarChart(cases_onset_by_week, xvar = Date, yvar = Cases_Date_Onset)
gvisBarChart(cases_onset_by_wee)
gvisBarChart(cases_onset_by_week)
plot(trial)
trial <- gvisBarChart(cases_onset_by_week)
plot(trial)
library()ggiraph)
install.packages("ggiraph")
library()ggiraph)
library(ggiraph)
geom_col_interactive(cases_onset_by_week)
geom_col(data = cases_onset_by_week)
cases_onset_graph <- geom_col(data = cases_onset_by_week)
geom_col_interactive()
cases_onset_graph
plot(cases_onset_graph)
view(cases_onset_graph)
cases_onset_graph <- geom_col(data = cases_onset_by_week)
geom_col(data = cases_onset_by_week)
cases_onset_graph <- cases_onset_by_week %>%
ggplot() +
geom_col(aes = (x = Date, y = Cases_Date_Onset))
cases_onset_graph <- cases_onset_by_week %>%
ggplot() +
geom_col(aes(x = Date, y=Cases_Date_Onset))
cases_onset_graph
cases_onset_graph <- cases_onset_by_week %>%
ggplot() +
geom_col(aes(x = Date, y=Cases_Date_Onset))
cases_onset_graph
cases_onset_graph <- cases_onset_by_week %>%
ggplot() +
geom_col_interactive(aes(x = Date, y=Cases_Date_Onset))
cases_onset_graph
library(plotly)
cases_onset_graph <- cases_onset_by_week %>%
ggplot() +
geom_col_interactive(aes(x = Date, y=Cases_Date_Onset))
ggplotly(cases_onset_graph)
cases_onset_graph <- cases_onset_by_week %>%
ggplot() +
geom_col(aes(x = Date, y=Cases_Date_Onset))
ggplotly(cases_onset_graph)
#Create Weekly Cases by Onet Date Graph
cases_onset_graph <- cases_onset_by_week %>%
plot_ly(
x = Date,
y = Cases_Date_Onset
)
#Create Weekly Cases by Onet Date Graph
cases_onset_graph <- cases_onset_by_week %>%
plot_ly()
(cases_onset_graph)
#Render Graph as Plotly Interactive Graph
cases_onset_graph
cases_onset_graph <- cases_onset_by_week %>%
plot_ly()
#Create Weekly Cases by Onet Date Graph
cases_onset_graph <- cases_onset_by_week %>%
plot_ly(
type = "bar",
y= ~Cases_Date_Onset
)
#Render Graph as Plotly Interactive Graph
cases_onset_graph
#Create Weekly Cases by Onet Date Graph
cases_onset_graph <- cases_onset_by_week %>%
plot_ly(
type = "bar",
x = ~Date,
y = ~Cases_Date_Onset
)
#Render Graph as Plotly Interactive Graph
cases_onset_graph
#Create Weekly Cases by Onet Date Graph
cases_onset_graph <- cases_onset_by_week %>%
plotly() %>%
add_trace(
type = "bar",
x = ~Date,
y = ~Cases_Date_Onset
)
#Create Weekly Cases by Onet Date Graph
cases_onset_graph <- plotly(cases_onset_by_week) %>%
add_trace(
type = "bar",
x = ~Date,
y = ~Cases_Date_Onset
)
#Create Weekly Cases by Onet Date Graph
cases_onset_graph <- plot_ly(cases_onset_by_week) %>%
add_trace(
type = "bar",
x = ~Date,
y = ~Cases_Date_Onset
)
#Render Graph as Plotly Interactive Graph
cases_onset_graph
