case_rate_cases_merged_last_7_and_rate <- left_join(case_rate_case_counts, case_rate_most_recent_cases_and_rate, by = c("Borough" = "Borough"))
#Add Community Rate Level Tag
case_rate_cases_add_comm_rate_tag <- data.frame(case_rate_cases_merged_last_7_and_rate)
case_rate_cases_add_comm_rate_tag$Community_Rate_Tag <- ifelse(case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days >= 400, '>400',
ifelse(case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days < 400 & case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days >= 200, "200-399",
ifelse(case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days < 200 & case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days >= 100, "100-199",
ifelse(case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days < 100 & case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days >= 50, "50-99",
ifelse(case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days < 50 & case_rate_cases_add_comm_rate_tag$Rate_Last_7_Days >= 0, "0-49",
"None")))))
#Limit Decimals to 2 in Rates
case_rate_round_rates_decimals <- data.frame(case_rate_cases_add_comm_rate_tag)
case_rate_round_rates_decimals$Rate_Last_7_Days <- round(case_rate_round_rates_decimals$Rate_Last_7_Days, 2)
#Convert Rates to Strings
case_rate_convert_rates_to_strings <- data.frame(case_rate_round_rates_decimals)
case_rate_convert_rates_to_strings$Rate_Last_7_Days <- as.character(case_rate_convert_rates_to_strings$Rate_Last_7_Days)
#If Cases Less than 6, Hide Case Rate
case_rate_hide_case_rates <- data.frame(case_rate_convert_rates_to_strings)
case_rate_hide_case_rates$Rate_Last_7_Days <- ifelse(case_rate_hide_case_rates$Cases_Last_7_Days < 6, "**", case_rate_hide_case_rates$Rate_Last_7_Days)
#Add Commas to Case Counts and Rates
case_rate_add_thousand_commas <- data.frame(case_rate_hide_case_rates)
case_rate_add_thousand_commas$Cases_Last_7_Days <- prettyNum(case_rate_add_thousand_commas$Cases_Last_7_Days, big.mark=",")
case_rate_add_thousand_commas$Rate_Last_7_Days <- prettyNum(case_rate_add_thousand_commas$Rate_Last_7_Days, big.mark=",")
#Set Final Data Table
case_rate_cases_summary <- data.frame(case_rate_add_thousand_commas)
#Pull in Processed Cases Data
case_rate_cases_data_pull <- data.frame(case_rate_processed_cases_data)
#Keep Only Case Rates and Cases Last 7
case_rate_keep_case_rates <- select(case_rate_cases_data_pull, Date, Borough, Rate_Last_7_Days, Cases_Last_7_Days)
#Create Weekdays
case_rate_rates_create_weekdays <- data.frame(case_rate_keep_case_rates)
case_rate_rates_create_weekdays$Weekday <- weekdays(case_rate_rates_create_weekdays$Date)
#Select Only Saturdays from DataFrame
case_rate_rates_keep_sat <- filter(case_rate_rates_create_weekdays, case_rate_rates_create_weekdays$Weekday == "Saturday")
case_rate_rates_keep_sat <- select(case_rate_rates_keep_sat, -c(Weekday))
#Keep Only Last 6 Entries for Each Borough
case_rate_last_6_entries_case_rates <- data.frame()
for (borough in case_rate_borough_list){
case_rate_rates_borough_pull <- filter(case_rate_rates_keep_sat, Borough == borough)
case_rate_keep_last_6 <- tail(case_rate_rates_borough_pull, n = 6)
case_rate_last_6_entries_case_rates <- rbind(case_rate_last_6_entries_case_rates, case_rate_keep_last_6)
}
#Add Community Rate Level Tag
case_rate_rates_add_comm_rate_tag <- data.frame(case_rate_last_6_entries_case_rates)
case_rate_rates_add_comm_rate_tag$Community_Rate_Tag <- ifelse(case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days >= 400, 'level_5',
ifelse(case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days < 400 & case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days >= 200, "level_4",
ifelse(case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days < 200 & case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days >= 100, "level_3",
ifelse(case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days < 100 & case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days >= 50, "level_2",
ifelse(case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days < 50 & case_rate_rates_add_comm_rate_tag$Rate_Last_7_Days >= 0, "level_1",
"None")))))
#Set Final Data Table
case_rate_case_rates_over_6_weeks <- data.frame(case_rate_rates_add_comm_rate_tag)
#SET TIMESTAMPS FOR HEADER TITLES
#Pull Date Frame from Case Rates Overt Time Dataframe
case_rate_cases_time_pull <- select(case_rate_case_rates_over_6_weeks, Date, Borough) %>%
filter(Borough == "Alaska") %>%
select(Date)
#Set Extra Day on Start Dates to Match Sunday
case_rate_cases_start <- case_rate_cases_time_pull[5,1] + 1
case_rate_rate_start <- case_rate_cases_time_pull[1,1] + 1
#Pull the Timeframe for the Cases Over Last 7 Days
case_rate_cases_timeframe <- paste0(format(as.Date(case_rate_cases_start, format = "%Y%m%d"), "%b %d"),
" - ",
format(as.Date(case_rate_cases_time_pull[6,1], format = "%Y%m%d"), "%b %d"))
#Pull the Timeframe for the Case Rates Bar Graph
case_rate_rates_timeframe <- paste0(format(as.Date(case_rate_rate_start, format = "%Y%m%d"), "%b %d"),
" - ",
format(as.Date(case_rate_cases_time_pull[6,1], format = "%Y%m%d"), "%b %d"))
#CREATE BAR CHART IMAGES FOR TABLE
#Set an Empty List to Store Bar Graph File Locations
case_rate_temp_file_dict <- dict(init_keys = NULL, init_values = NULL)
#Set Dataframe for the Bar Charts
case_rate_bar_charts <- data.frame(case_rate_case_rates_over_6_weeks)
#Set Color Keys for Levels
level_5 = "#a8171c"
level_4 = "#df342d"
level_3 = "#fb6f50"
level_2 = "#fcb194"
level_1 = "#fee6da"
#Set Color Palette For Community Rates Bar Charts
color_palette <- c(
"level_1" = level_1,
"level_2" = level_2,
"level_3" = level_3,
"level_4" = level_4,
"level_5" = level_5
)
#Generate Bar Graphs for Each Borough and Save to TempDir for Later Use
for (borough in case_rate_borough_list){
#Pull Data by Borough
case_rate_bar_graphs_bor_pull <- case_rate_bar_charts[case_rate_bar_charts$Borough == borough,]
par(mar=c(1, 1, 1, 1))
#Generate Bar Graph
rate_plot <- ggplot(case_rate_bar_graphs_bor_pull) +
geom_bar(aes(x=Date, y = Cases_Last_7_Days, fill = Community_Rate_Tag), width = 5, show.legend = FALSE, stat = 'identity') +
scale_fill_manual(values = color_palette) +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent'),
plot.margin = unit(c(-15, -5, -20, -5), "pt")
)
#Set File Path to Temporary Folder
case_rate_temp_filepath <- file.path(tempdir(), paste0(borough, " Bar Chart.png"))
#Add Temp Filepath to Dictionary
case_rate_temp_file_dict[borough] <- case_rate_temp_filepath
#Export Bar Graph and Save to Temp File Location
ggsave(path = file.path(tempdir()),
filename = paste0(borough, " Bar Chart.png"),
dpi= 500)
}
#Pull Hospital Data from Hospital Beds Occupied Folder
hosp_bed_filepath = paste0(base_hosp_filepath,
"hospital_beds_occupied_",
newFileDate,
".csv")
hosp_bed = read.csv(hosp_bed_filepath)
#Filter by GCAF
hosp_bed_filter_gcaf <- filter(hosp_bed,
Facility.Filter == 1)
#Select Region and Counts Columns
hosp_bed_select_cols <- select(hosp_bed_filter_gcaf,
Survey.Date, Hospital.Region, Pos.COVID..Imputed.)
#Create List of Regions in Data Table
hosp_bed_region_list <- select(hosp_bed_select_cols, Hospital.Region)
hosp_bed_region_list <- unique(hosp_bed_region_list)
hosp_bed_region_list <- as.list(hosp_bed_region_list$Hospital.Region)
#Create Empty Data Frame with Dates for Merge
hosp_bed_merged_datasets <- data.frame(hosp_bed_select_cols) %>%
select(-c(Hospital.Region, Pos.COVID..Imputed.)) %>%
unique()
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%m/%d/%Y")
hosp_bed_merged_datasets$Survey.Date <- as.character(hosp_bed_merged_datasets$Survey.Date)
#Merge Region Data into Main Dataframe
for (region in hosp_bed_region_list){
#Select Out 1 Region at a Time
hosp_bed_region_grab <- filter(hosp_bed_select_cols, Hospital.Region == region)
#Convert Survey Date Field to Date Type
hosp_bed_region_grab$Survey.Date <- as.Date( hosp_bed_region_grab$Survey.Date, "%m/%d/%Y")
#Group by Day
hosp_bed_region_grab <- hosp_bed_region_grab %>%
group_by(Survey.Date, Hospital.Region) %>%
summarize(Pos.COVID..Imputed. = sum(Pos.COVID..Imputed.))
#Create Region Column
hosp_bed_region_grab[[region]] = hosp_bed_region_grab$Pos.COVID..Imputed.
#Drop Pos COVID Count and Region Name
hosp_bed_region_grab <- select(hosp_bed_region_grab, Survey.Date, all_of(region))
#Convert Dates to Characters
hosp_bed_region_grab$Survey.Date <- as.character(hosp_bed_region_grab$Survey.Date)
#Merge Region Grab to Merged Dataset
hosp_bed_merged_datasets <- merge(hosp_bed_merged_datasets, hosp_bed_region_grab, by = c("Survey.Date"))
}
hosp_bed_merged_datasets$Survey.Date <- as.Date(hosp_bed_merged_datasets$Survey.Date, "%Y-%m-%d")
#Convert Dates to Weekdays
hosp_bed_add_weekdays <- mutate(hosp_bed_merged_datasets, Weekday = weekdays(Survey.Date))
#Keep Only Saturdays
hosp_bed_keep_sat <- filter(hosp_bed_add_weekdays, Weekday == "Saturday")
#Drop Weekdays Column
hosp_bed_drop_weekday <- select(hosp_bed_keep_sat, -c(Weekday))
#Create Total Column
hosp_bed_add_total <- data.frame(hosp_bed_drop_weekday) %>%
mutate(Total = (Anchorage + Gulf.Coast + Interior + Matanuska.Susitna + Northern + Southeast + Southwest))
#Set Final DataFrame
hosp_bed_occupied <- data.frame(hosp_bed_add_total)
#Pull Data from VPN Public Health Folder
vac_unvac_hosp_filepath = paste0(base_hosp_filepath,
"four_week_hosp_IRs_table_",
newFileDate,
".csv")
vac_unvac_hosp = read.csv(vac_unvac_hosp_filepath)
#Pull Data from VPN Public Health Folder
vac_unvac_hosp_filepath = paste0(base_vac_unvac_filepath,
"four_week_hosp_IRs_table_",
newFileDate,
".csv")
vac_unvac_hosp = read.csv(vac_unvac_hosp_filepath)
#Pull Data from VPN Public Health Folder
vac_unvac_hosp_filepath = paste0(base_vac_unvac_filepath,
"Vac vs Unvac Hospitalization Rate/four_week_hosp_IRs_table_",
newFileDate,
".csv")
vac_unvac_hosp = read.csv(vac_unvac_hosp_filepath)
#Edit Dataframe and Restructure for Graph
vac_unvac_hosp_data <- vac_unvac_hosp %>%
mutate(Date = paste0(format(as.Date(start_date, "%Y-%m-%d"), "%b %d"), " - ", format(as.Date(end_date, "%Y-%m-%d"), "%b %d"))) %>%
mutate(Up.to.Date = up_to_date.adj.hosp.rate.100K) %>%
mutate(Full.Vax = full_vax_not_utd.adj.hosp.rate.100K) %>%
mutate(Unvax = unvax.adj.hosp.rate.100K) %>%
select(Date,
Up.to.Date,
Full.Vax,
Unvax)
vac_unvac_hosp_data <- data.frame(vac_unvac_hosp_data, stringsAsFactors = FALSE )
#Pull Data from Vaccinated vs Unvaccinated Folder
vac_unvac_case_filepath = paste0(base_vac_unvac_filepath,
"Vac vs Unvac Case Rate/weekly_case_IRs_table_",
newFileDate,
".csv")
vac_unvac_case = read.csv(vac_unvac_case_filepath)
#Edit Dataframe and Restructure for Graph
vac_unvac_case_data <- vac_unvac_case %>%
mutate(Date = as.Date(start_date, "%Y-%m-%d")) %>%
mutate(Up.to.Date = up_to_date.adj.case.rate.100K) %>%
mutate(Full.Vax = full_vax_not_utd.adj.case.rate.100K) %>%
mutate(Unvax = unvax.adj.case.rate.100K) %>%
mutate(Start.End.Tag = paste0(format(as.Date(start_date, "%Y-%m-%d"), "%b %d"), " - ", format(as.Date(end_date, "%Y-%m-%d"), "%b %d"))) %>%
select(Date,
Up.to.Date,
Full.Vax,
Unvax,
Start.End.Tag)
base_cases_filepath <- "//hssancconf/DPH/HAVRS/Shared/Public Health Data for Dashboards/COVID-19 and Flu Weekly Report/COVID-19 Cases/"
base_hosp_filepath <- "//hssancconf/DPH/HAVRS/Shared/Public Health Data for Dashboards/COVID-19 and Flu Weekly Report/Hospital Beds Occupied/"
base_vac_unvac_filepath <- "//hssancconf/DPH/HAVRS/Shared/Public Health Data for Dashboards/COVID-19 and Flu Weekly Report/Vaccinated vs Unvaccinated/"
base_flu_filepath <- "//hssancconf/DPH/HAVRS/Shared/Public Health Data for Dashboards/COVID-19 and Flu Weekly Report/Flu Cases by Season/"
base_emergency_filepath <- "//hssancconf/DPH/HAVRS/Shared/Public Health Data for Dashboards/COVID-19 and Flu Weekly Report/Emergency Department Visits/"
#Pull Data from Flu Cases by Week Folder
flu_season_filepath = paste0(base_flu_filepath,
"flu_data_",
newFileDate,
".csv")
flu_season = read.csv(flu_season_filepath)
#Drop MMWR and Convert Dates to Datetime Index
flu_weekly_cases_drop_and_convert <- flu_weekly_cases_data %>%
select(-c(MMWR..)) %>%
mutate(Date = as.Date(Date, "%m/%d/%Y"))
#Rename Column Headers
flu_weekly_cases_rename_headers <- flu_weekly_cases_drop_and_convert %>%
rename(Season_Current = Current.Season,
Season_20_21 = X20.21.Season,
Season_19_20 = X19.20.Season,
Season_18_19 = X18.19.Season,
Season_17_18 = X17.18.Season)
#Set Final Dataset
flu_weekly_cases <- data.frame(flu_weekly_cases_rename_headers)
#Pull Data from Flu Cases by Week Folder
flu_season_filepath = paste0(base_flu_filepath,
"flu_data_",
newFileDate,
".csv")
flu_season = read.csv(flu_season_filepath)
#Drop MMWR and Convert Dates to Datetime Index
flu_season_cases_drop_and_convert <- flu_season %>%
select(-c(MMWR..)) %>%
mutate(Date = as.Date(Date, "%m/%d/%Y"))
#Rename Column Headers
flu_season_rename_headers <- flu_season_drop_and_convert %>%
rename(Season_Current = Current.Season,
Season_20_21 = X20.21.Season,
Season_19_20 = X19.20.Season,
Season_18_19 = X18.19.Season,
Season_17_18 = X17.18.Season)
#Pull Data from Flu Cases by Week Folder
flu_season_filepath = paste0(base_flu_filepath,
"flu_data_",
newFileDate,
".csv")
flu_season = read.csv(flu_season_filepath)
#Drop MMWR and Convert Dates to Datetime Index
flu_season_drop_and_convert <- flu_season %>%
select(-c(MMWR..)) %>%
mutate(Date = as.Date(Date, "%m/%d/%Y"))
#Rename Column Headers
flu_season_rename_headers <- flu_season_drop_and_convert %>%
rename(Season_Current = Current.Season,
Season_20_21 = X20.21.Season,
Season_19_20 = X19.20.Season,
Season_18_19 = X18.19.Season,
Season_17_18 = X17.18.Season)
#Set Final Dataset
flu_season_cases <- data.frame(flu_season_rename_headers)
#Manually Set Report Start and End Dates
report_start <- "2022-03-27"
report_end <- "2022-04-02"
start_datetime <- as.Date(report_start, "%Y-%m-%d")
end_datetime <- as.Date(report_end, "%Y-%m-%d")
#Convert Start to Date Time
start_datetime <- as.Date(report_start, "%Y-%m-%d")
#Convert End to Date Time
end_datetime <- as.Date(report_end, "%Y-%m-%d")
#Create Start Month-Day
start_month_day <- format(start_datetime, "%M %d")
#Create Start Month-Day
start_month_day <- format(start_datetime, "%B %d")
#Create End Month-Day
start_month_day <- format(end_datetime, "%B %d")
#Create End Month-Day
end_month_day <- format(end_datetime, "%B %d")
#Create Start Month-Day
start_month_day <- format(start_datetime, "%B %d")
#Create Start Month-Day-Year
start_month_day_year <- format(start_datetime, "%B %d, %Y")
#Create End Month-Day
end_month_day_year <- format(end_datetime, "%B %d, %Y")
#Create Start - End Month Day
start_end_month_day <- paste0(start_month_day,
" - ",
end_month_day)
#Create Start - End Month Day Year
report_year <- format(start_datetime, "%Y")
start_end_month_day_year <- paste0(start_month_day,
" - ",
end_month_day,
", ",
report_year)
#Convert Start to Date Time
start_datetime <- as.Date(report_start, "%Y-%m-%d")
#Convert End to Date Time
end_datetime <- as.Date(report_end, "%Y-%m-%d")
#Create Start Month-Day
start_month_day <- format(start_datetime, "%B %d")
#Create End Month-Day
end_month_day <- format(end_datetime, "%B %d")
#Create Start Month-Day-Year
start_month_day_year <- format(start_datetime, "%B %d, %Y")
#Create End Month-Day
end_month_day_year <- format(end_datetime, "%B %d, %Y")
#Create Start - End Month Day
start_end_month_day <- paste0(start_month_day,
" - ",
end_month_day)
#Create Start - End Month Day Year
report_year <- format(start_datetime, "%Y")
start_end_month_day_year <- paste0(start_month_day,
" - ",
end_month_day,
", ",
report_year)
knitr::opts_chunk$set(echo = TRUE)
#Pull Data from Emergency Department Visits Folder
emerg_depart_filepath = paste0(base_emergency_filepath,
"cli_and_ili_",
newFileDate,
".csv")
emerg_depart = read.csv(emerg_depart_filepath)
View(emerg_depart)
#Convert Dates to Datetime
emerg_depart_convert_dates <- emerg_depart %>%
mutate(Date = as.Date(Date, "%d%b%y"))
library(dplyr)
library(reactable)
library(htmltools)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(reactablefmtr)
library(RcppRoll)
library(Dict)
library(tinytex)
library(timetk)
library(plotly)
#Pull Data from Emergency Department Visits Folder
emerg_depart_filepath = paste0(base_emergency_filepath,
"cli_and_ili_",
newFileDate,
".csv")
emerg_depart = read.csv(emerg_depart_filepath)
#Convert Dates to Datetime
emerg_depart_convert_dates <- emerg_depart %>%
mutate(Date = as.Date(Date, "%d%b%y"))
View(emerg_depart_convert_dates)
colnames(emerg_depart_convert_dates)
#Rename Column Headers
emerg_depart_rename_headers <- emerg_depart_convert_dates %>%
rename(ILI = X..ILI,
CLI = X..CLI)
View(emerg_depart_rename_headers)
#Pull Data from Emergency Department Visits Folder
emerg_depart_filepath = paste0(base_emergency_filepath,
"cli_and_ili_",
newFileDate,
".csv")
emerg_depart = read.csv(emerg_depart_filepath)
#Convert Dates to Datetime
emerg_depart_convert_dates <- emerg_depart %>%
mutate(Date = as.Date(Date, "%d%b%y"))
#Rename Column Headers
emerg_depart_rename_headers <- emerg_depart_convert_dates %>%
rename(ILI = X..ILI,
CLI = X..CLI)
#Set Final Table
emergency_department_cases <- data.frame(emerg_depart_rename_headers)
emergency_department_graph = plot_ly(emergency_department_cases) %>%
#Add COVID-Like Illness Line
add_trace(
name = "COVID-Like Illness",
type = "scatter",
mode = "lines",
x = ~Date,
y = ~CLI,
line = list(
color = "#d56b28",
width = 3)
) %>%
#Add Influenza -Like Illness Line
add_trace(
name = "Influenza-Like Illness",
type = "scatter",
mode = "lines",
x = ~Date,
y = ~ILI,
line = list(
color = "#3c38b7",
width = 3)
) %>%
#Layout
layout(
hovermode = "x",
legend = list(
x = .05,
y = .98
)
)
emergency_department_graph
emergency_department_graph = plot_ly(emergency_department_cases) %>%
#Add COVID-Like Illness Line
add_trace(
name = "COVID-Like Illness",
type = "scatter",
mode = "lines",
x = ~Date,
y = ~CLI,
line = list(
color = "#fba63b",
width = 3)
) %>%
#Add Influenza -Like Illness Line
add_trace(
name = "Influenza-Like Illness",
type = "scatter",
mode = "lines",
x = ~Date,
y = ~ILI,
line = list(
color = "#150fad",
width = 3)
) %>%
#Layout
layout(
hovermode = "x unified",
legend = list(
x = .05,
y = .98
)
)
emergency_department_graph
emergency_department_graph = plot_ly(emergency_department_cases) %>%
#Add COVID-Like Illness Line
add_trace(
name = "COVID-Like Illness",
type = "scatter",
mode = "lines",
x = ~Date,
y = ~CLI,
line = list(
color = "#fba63b",
width = 3)
) %>%
#Add Influenza -Like Illness Line
add_trace(
name = "Influenza-Like Illness",
type = "scatter",
mode = "lines",
x = ~Date,
y = ~ILI,
line = list(
color = "#150fad",
width = 3)
) %>%
#Layout
layout(
#SET HOVER MODE
hovermode = "x unified",
#SET XAXIS
xaxis = list(
title = ""
),
#SET YAXIS
yaxis = list(
title = "Percentage of Visits"
),
#SET LEGEND
legend = list(
x = .05,
y = .98
)
)
emergency_department_graph
knitr::opts_chunk$set(echo = TRUE)
```{r import libraries, include = FALSE}
library(dplyr)
library(reactable)
library(htmltools)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(reactablefmtr)
library(RcppRoll)
library(Dict)
library(tinytex)
library(timetk)
library(plotly)
#Manual Set Date Stamp for Base Files
newFileDate <- '20220427'
#Manually Set Report Start and End Dates
report_start <- "2022-03-27"
report_end <- "2022-04-02"
